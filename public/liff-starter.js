var bearerToken;

window.onload = function() {
    const useNodeJS = true;   // if you are not using a node server, set this value to false
    const defaultLiffId = "";   // change the default LIFF value if you are not using a node server

    // DO NOT CHANGE THIS
    let myLiffId = "";
	bearerToken = "";

    // if node is used, fetch the environment variable and pass it to the LIFF method
    // otherwise, pass defaultLiffId
    if (useNodeJS) {
        fetch('/send-id')
            .then(function(reqResponse) {
                return reqResponse.json();
            })
            .then(function(jsonResponse) {
                myLiffId = jsonResponse.id;
				bearerToken = jsonResponse.bearerToken;
                initializeLiffOrDie(myLiffId);
            })
            .catch(function(error) {
                document.getElementById("liffAppContent").classList.add('hidden');
                document.getElementById("nodeLiffIdErrorMessage").classList.remove('hidden');
            });
    } else {
        myLiffId = defaultLiffId;
		bearerToken = "";
        initializeLiffOrDie(myLiffId);
    }
};

/**
* Check if myLiffId is null. If null do not initiate liff.
* @param {string} myLiffId The LIFF ID of the selected element
*/
function initializeLiffOrDie(myLiffId) {
    if (!myLiffId) {
        document.getElementById("liffAppContent").classList.add('hidden');
        document.getElementById("liffIdErrorMessage").classList.remove('hidden');
    } else {
        initializeLiff(myLiffId);
    }
}

/**
* Initialize LIFF
* @param {string} myLiffId The LIFF ID of the selected element
*/
function initializeLiff(myLiffId) {
    liff
        .init({
            liffId: myLiffId
        })
        .then(() => {
            // start to use LIFF's api
            initializeApp();
        })
        .catch((err) => {
            document.getElementById("liffAppContent").classList.add('hidden');
            document.getElementById("liffInitErrorMessage").classList.remove('hidden');
        });
}

/**
 * Initialize the app by calling functions handling individual app components
 */
function initializeApp() {
    displayLiffData();
    displayIsInClientInfo();
    registerButtonHandlers();

    // check if the user is logged in/out, and disable inappropriate button
    if (liff.isLoggedIn()) {
        document.getElementById('liffLoginButton').disabled = true;
    } else {
        document.getElementById('liffLogoutButton').disabled = true;
    }
}

/**
* Display data generated by invoking LIFF methods
*/
function displayLiffData() {
    document.getElementById('browserLanguage').textContent = liff.getLanguage();
    document.getElementById('sdkVersion').textContent = liff.getVersion();
    document.getElementById('lineVersion').textContent = liff.getLineVersion();
    document.getElementById('isInClient').textContent = liff.isInClient();
    document.getElementById('isLoggedIn').textContent = liff.isLoggedIn();
    document.getElementById('deviceOS').textContent = liff.getOS();
}

/**
* Toggle the login/logout buttons based on the isInClient status, and display a message accordingly
*/
function displayIsInClientInfo() {
    if (liff.isInClient()) {
        document.getElementById('liffLoginButton').classList.toggle('hidden');
        document.getElementById('liffLogoutButton').classList.toggle('hidden');
        document.getElementById('isInClientMessage').textContent = 'You are opening the app in the in-app browser of LINE.';
    } else {
        document.getElementById('isInClientMessage').textContent = 'You are opening the app in an external browser.';
        document.getElementById('shareTargetPicker').classList.toggle('hidden');
    }
}

/**
* Register event handlers for the buttons displayed in the app
*/
function registerButtonHandlers() {
    // openWindow call
    document.getElementById('openWindowButton').addEventListener('click', function() {
        liff.openWindow({
            url: 'https://line.me',
            external: true
        });
    });

    // closeWindow call
    document.getElementById('closeWindowButton').addEventListener('click', function() {
        if (!liff.isInClient()) {
            sendAlertIfNotInClient();
        } else {
            liff.closeWindow();
        }
    });

    // sendMessages call
    document.getElementById('sendMessageButton').addEventListener('click', function() {
        if (!liff.isInClient()) {
            sendAlertIfNotInClient();
        } else {
            liff.sendMessages([{
                'type': 'text',
                'text': "You've successfully sent a message! Hooray!"
            }]).then(function() {
                window.alert('Message sent');
            }).catch(function(error) {
                window.alert('Error sending message: ' + error);
            });
        }
    });

    // scanCode call
    document.getElementById('scanQrCodeButton').addEventListener('click', function() {
        /*if (!liff.isInClient()) {
            sendAlertIfNotInClient();
        } else {
            liff.scanCode().then(result => {
                // e.g. result = { value: "Hello LIFF app!" }
                const stringifiedResult = JSON.stringify(result);
                document.getElementById('scanQrField').textContent = stringifiedResult;
                toggleQrCodeReader();
            }).catch(err => {
                document.getElementById('scanQrField').textContent = "scanCode failed!";
            });
        }*/
		searchAction();
		//clearBox('container');
		//fetchTweetsByUser("realdonaldtrump", "10", "false", "true");
		//fetchTweetsByTweetIDs(["1319871444101353473","1318823569988612096"]);
		//fetchTweetsByTweetID("1319871444101353473");
		//fetchTweetsByTweetID("1318823569988612096");
		//fetchTweetsByText("#TaiwanCanHelp");
		
		//embedTweet('1319862880846708737');
		

    });

    // get access token
    document.getElementById('getAccessToken').addEventListener('click', function() {
        if (!liff.isLoggedIn() && !liff.isInClient()) {
            alert('To get an access token, you need to be logged in. Please tap the "login" button below and try again.');
        } else {
            const accessToken = liff.getAccessToken();
            document.getElementById('accessTokenField').textContent = accessToken;
            toggleAccessToken();
        }
    });

    // get profile call
    document.getElementById('getProfileButton').addEventListener('click', function() {
        liff.getProfile().then(function(profile) {
            document.getElementById('userIdProfileField').textContent = profile.userId;
            document.getElementById('displayNameField').textContent = profile.displayName;

            const profilePictureDiv = document.getElementById('profilePictureDiv');
            if (profilePictureDiv.firstElementChild) {
                profilePictureDiv.removeChild(profilePictureDiv.firstElementChild);
            }
            const img = document.createElement('img');
            img.src = profile.pictureUrl;
            img.alt = 'Profile Picture';
            profilePictureDiv.appendChild(img);

            document.getElementById('statusMessageField').textContent = profile.statusMessage;
            toggleProfileData();
        }).catch(function(error) {
            window.alert('Error getting profile: ' + error);
        });
    });

    document.getElementById('shareTargetPicker').addEventListener('click', function () {
        if (liff.isApiAvailable('shareTargetPicker')) {
            liff.shareTargetPicker([{
                'type': 'text',
                'text': 'Hello, World!'
            }]).then(
                document.getElementById('shareTargetPickerMessage').textContent = "Share target picker was launched."
            ).catch(function (res) {
                document.getElementById('shareTargetPickerMessage').textContent = "Failed to launch share target picker.";
            });
        }
    });

    // login call, only when external browser is used
    document.getElementById('liffLoginButton').addEventListener('click', function() {
        if (!liff.isLoggedIn()) {
            // set `redirectUri` to redirect the user to a URL other than the front page of your LIFF app.
            liff.login();
        }
    });

    // logout call only when external browse
    document.getElementById('liffLogoutButton').addEventListener('click', function() {
        if (liff.isLoggedIn()) {
            liff.logout();
            window.location.reload();
        }
    });
}

/**
* Alert the user if LIFF is opened in an external browser and unavailable buttons are tapped
*/
function sendAlertIfNotInClient() {
    alert('This button is unavailable as LIFF is currently being opened in an external browser.');
}

/**
* Toggle access token data field
*/
function toggleAccessToken() {
    toggleElement('accessTokenData');
}

/**
* Toggle profile info field
*/
function toggleProfileData() {
    toggleElement('profileInfo');
}

/**
* Toggle scanCode result field
*/
function toggleQrCodeReader() {
    toggleElement('scanQr');
}

/**
* Toggle specified element
* @param {string} elementId The ID of the selected element
*/
function toggleElement(elementId) {
    const elem = document.getElementById(elementId);
    if (elem.offsetWidth > 0 && elem.offsetHeight > 0) {
        elem.style.display = 'none';
    } else {
        elem.style.display = 'block';
    }
}

function searchAction(){
	const submit = document.getElementById("go");
	submit.addEventListener('click', function() {
		clearBox('container');
		var usage = document.querySelector('input[name = "usage"]:checked').value;
		if(usage === "user"){
			var user = document.getElementById("text");
			fetchTweetsByUser(user.value, "10", "false", "true");
			fetchTweetsByUser("realdonaldtrump", "10", "false", "true");
		}
		else if(usage === "keyword"){
			var txt = document.getElementById("text");
			fetchTweetsByText(txt.value);
		}
		else if(usage === "shareurl"){
			var id = "1318823569988612096";
			fetchTweetsByTweetID(id);
		}
	});
}

function fetchTweetsByUser(user, numcnts, rt, no_rp){
	url = "https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name="+user+"&count="+numcnts+"&include_rts="+rt+"&exclude_replies="+no_rp;
	
	var myHeaders = new Headers();
	myHeaders.append("Authorization", "Bearer "+bearerToken);

	var requestOptions = {
	  method: 'GET',
	  headers: myHeaders,
	  redirect: 'follow',
	};

	fetch("https://my-cors-anywhere.herokuapp.com/"+url, requestOptions)
	  .then(function(response) { return response.json(); })
	  .then(function(json) {
		  //console.log(json);
		  var x;
		  for(x in json){
			  //console.log(json[x]["id_str"]);
			  var child = document.createElement('div');
			  child.setAttribute("id", json[x]["id_str"]);
			  document.getElementById("container").appendChild(child);
			  embedTweet(json[x]["id_str"]);
			  createButton(json[x]["id_str"]);
		  }
	  })
	  .catch(error => console.log('error', error));
}

function fetchTweetsByTweetID(ID){
	url = "https://api.twitter.com/2/tweets/"+ID+"?";
	url += "&tweet.fields=created_at,public_metrics&expansions=author_id,attachments.media_keys&user.fields=profile_image_url&media.fields=preview_image_url,url";
	var myHeaders = new Headers();
	myHeaders.append("Authorization", "Bearer "+bearerToken);

	var requestOptions = {
	  method: 'GET',
	  headers: myHeaders,
	  redirect: 'follow',
	};

	fetch("https://my-cors-anywhere.herokuapp.com/"+url, requestOptions)
	  .then(function(response) { return response.json(); })
	  .then(function(json) {
		  //prepare for flex massage
		  var user_id = json["includes"]["users"][0]["username"];
		  var username = json["includes"]["users"][0]["name"];
		  var prof_image_url = json["includes"]["users"][0]["profile_image_url"];
		  var image_url = [];
		  if(json["includes"].hasOwnProperty("media")) {
			  var x;
			  for(x in json["includes"]["media"]){
				if(json["includes"]["media"][x].hasOwnProperty("url")){
					image_url.push(json["includes"]["media"][x]["url"]);
				}
				else if(json["includes"]["media"][x].hasOwnProperty("preview_image_url")){
					image_url.push(json["includes"]["media"][x]["preview_image_url"]); 
				}
			  }
		  }
		  var tweet_text = json["data"]["text"];
		  var time = json["data"]["created_at"];
		  var like_count = json["data"]["public_metrics"]["like_count"];
		  like_count = parseInt(like_count, 10);
		  if(like_count > 1000){
			  like_count = (like_count - like_count%100) / 1000;
			  like_count = like_count.toString();
			  like_count += "K";
		  }
		  else like_count = like_count.toString();
		  var tweet_url = "https://twitter.com/i/web/status/"+json["includes"]["users"][0]["id"];
		  /*console.log(user_id);
		  console.log(username);
		  console.log(prof_image_url);
		  console.log(image_url);
		  console.log(tweet_text);
		  console.log(time);
		  console.log(like_count);
		  console.log(tweet_url);*/
		  //call gen flex
		  //TODO: 
	  })
	  .catch(error => console.log('error', error));
}

function fetchTweetsByTweetIDs(IDs){
	url = "https://api.twitter.com/2/tweets?ids=";
	var x;
	for (x in IDs) {
	  url += IDs[x];
	  url +=",";
	}
	url = url.slice(0, -1);
	url += "&tweet.fields=created_at,public_metrics&expansions=author_id,attachments.media_keys&user.fields=profile_image_url&media.fields=preview_image_url,url";
	var myHeaders = new Headers();
	myHeaders.append("Authorization", "Bearer "+bearerToken);

	var requestOptions = {
	  method: 'GET',
	  headers: myHeaders,
	  redirect: 'follow',
	};

	fetch("https://my-cors-anywhere.herokuapp.com/"+url, requestOptions)
	  .then(function(response) { return response.json(); })
	  .then(function(json) {
		  var x;
		  for(x in json){
			  
		  }
	  })
	  .catch(error => console.log('error', error));
}

function fetchTweetsByText(txt){
	// hashtag: %23
	txt = encodeURIComponent(txt);
	url = "https://api.twitter.com/2/tweets/search/recent?query="+txt;
	//+"&tweet.fields=created_at,public_metrics&expansions=author_id,attachments.media_keys&user.fields=profile_image_url&media.fields=preview_image_url,url";
	var myHeaders = new Headers();
	myHeaders.append("Authorization", "Bearer "+bearerToken);

	var requestOptions = {
	  method: 'GET',
	  headers: myHeaders,
	  redirect: 'follow',
	};

	fetch("https://my-cors-anywhere.herokuapp.com/"+url, requestOptions)
	  .then(function(response) { 
			return response.json(); })
	  .then(function(json) {
		  var x;
		  console.log(json);
		  for(x in json["data"]){
			  //console.log(json["data"][x]["id"]);
			  var child = document.createElement('div');
			  child.setAttribute("id", json["data"][x]["id"]);
			  document.getElementById("container").appendChild(child);
			  embedTweet(json["data"][x]["id"]);
			  createButton(json["data"][x]["id"]);
		  }
	  })
	  .catch(error => console.log('error', error));
}

function clearBox(elementID)
{
	document.getElementById(elementID).innerHTML = '';
    /*el = document.getElementById(elementID);
	while( el.hasChildNodes() ){
		el.removeChild(el.lastChild);
	}*/
}

function embedTweet(ID){
	twttr.widgets.createTweet(
		  ID,
		  document.getElementById(ID),
		  {
		  }
		);
}
function createButton(ID){
	var button = document.createElement('button');
	button.innerHTML = ID;
	button.addEventListener('click', function() {
		fetchTweetsByTweetID(ID);
	});
	document.getElementById(ID).appendChild(button);
}